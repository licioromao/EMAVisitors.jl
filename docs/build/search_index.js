var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#EMAVisitors.OUTPUT_DIR","page":"API Reference","title":"EMAVisitors.OUTPUT_DIR","text":"OUTPUT_DIR\n\nA Ref{String} holding the path to the output directory for generated files.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.PATH_TO_CVs","page":"API Reference","title":"EMAVisitors.PATH_TO_CVs","text":"PATH_TO_CVs\n\nA Ref{String} holding the path to the directory containing CV PDF files.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.PATH_TO_DTU_WIND_LOGO","page":"API Reference","title":"EMAVisitors.PATH_TO_DTU_WIND_LOGO","text":"PATH_TO_DTU_WIND_LOGO\n\nA Ref{String} holding the path to the DTU wind logo SVG file.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.PATH_TO_EMA_MEMBERS","page":"API Reference","title":"EMAVisitors.PATH_TO_EMA_MEMBERS","text":"PATH_TO_EMA_MEMBERS\n\nA Ref{String} holding the path to the CSV file for EMA members.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.PATH_TO_EXCEL","page":"API Reference","title":"EMAVisitors.PATH_TO_EXCEL","text":"PATH_TO_EXCEL\n\nA Ref{String} holding the path to the main Excel file with talk information.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.PATH_TO_OTHER_MEMBERS","page":"API Reference","title":"EMAVisitors.PATH_TO_OTHER_MEMBERS","text":"PATH_TO_OTHER_MEMBERS\n\nA Ref{String} holding the path to the CSV file for other members.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.PATH_TO_TALK_SCHEDULE","page":"API Reference","title":"EMAVisitors.PATH_TO_TALK_SCHEDULE","text":"PATH_TO_TALK_SCHEDULE\n\nA Ref{String} holding the path to the CSV file for the talk schedule.\n\n\n\n\n\n","category":"constant"},{"location":"api/#EMAVisitors.DaySchedule","page":"API Reference","title":"EMAVisitors.DaySchedule","text":"DaySchedule(members::Dict{String, Tuple{Tuple{Time,Time}, String}}, date::Date)\n\nA type representing a day's schedule for seminars.\n\nFields\n\nmembers::Dict{String, Tuple{Tuple{Time,Time}, String}}: Mapping from member name to (time, room).\ndate::Date: The date of the schedule.\n\n\n\n\n\n","category":"type"},{"location":"api/#EMAVisitors.DaySchedule-Tuple{Vector{EMAVisitors.DtuMember}, Dates.Date, Vector{Tuple{Dates.Time, Dates.Time}}, Vector{String}}","page":"API Reference","title":"EMAVisitors.DaySchedule","text":"DaySchedule(m::Vector{DtuMember}, date::Date, times::Vector{Tuple{Time,Time}}, room::Vector{String})\n\nAlternate constructor for DaySchedule that builds the members dictionary from vectors of members, times, and rooms.\n\nArguments\n\nm::Vector{DtuMember}: List of members.\ndate::Date: The date of the schedule.\ntimes::Vector{Tuple{Time,Time}}: List of time slots.\nroom::Vector{String}: List of rooms.\n\nReturns\n\nA DaySchedule instance.\n\nExample\n\nschedule = DaySchedule([member1, member2], date, [(t1, t2), (t3, t4)], [\"Room1\", \"Room2\"])\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.DtuMember","page":"API Reference","title":"EMAVisitors.DtuMember","text":"DtuMember(firstname::String, lastname::String, email::String, position::String)\n\nA type representing a DTU member.\n\nFields\n\nfirstname::String: The member's first name.\nlastname::String: The member's last name.\nemail::String: The member's email address.\nposition::String: The member's position or title.\n\nExample\n\nmember = DtuMember(\"Alice\", \"Smith\", \"alice@dtu.dk\", \"Professor\")\n\n\n\n\n\n","category":"type"},{"location":"api/#EMAVisitors.DtuMember-Tuple{AbstractString, AbstractString, AbstractString}","page":"API Reference","title":"EMAVisitors.DtuMember","text":"DtuMember(name::AbstractString, email::AbstractString, position::AbstractString)\n\nAlternate constructor for DtuMember that takes a full name as a single string, an email, and a position.\n\nArguments\n\nname::AbstractString: The full name (first and last name separated by a space).\nemail::AbstractString: The member's email address.\nposition::AbstractString: The member's position or title.\n\nReturns\n\nA DtuMember instance with the parsed first and last name.\n\nExample\n\nmember = DtuMember(\"Alice Smith\", \"alice@dtu.dk\", \"Professor\")\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.Seminar","page":"API Reference","title":"EMAVisitors.Seminar","text":"Seminar(room::String, title::String, time::Tuple{Time,Time}, date::Date)\n\nA type representing a seminar event.\n\nFields\n\nroom::String: The seminar room.\ntitle::String: The seminar title.\ntime::Tuple{Time,Time}: Start and end time.\ndate::Date: The seminar date.\n\n\n\n\n\n","category":"type"},{"location":"api/#EMAVisitors.SpeakerName","page":"API Reference","title":"EMAVisitors.SpeakerName","text":"SpeakerName(firstname::String, lastname::String, email::String, affiliation::String, startingdate::Date, visitduration::Int, host::DtuMember, seminar::Union{Seminar,Nothing})\n\nA type representing a speaker's name and visit details.\n\nFields\n\nfirstname::String: First name.\nlastname::String: Last name.\nemail::String: Email address.\naffiliation::String: Affiliation.\nstartingdate::Date: Start date of visit.\nvisitduration::Int: Duration of visit in days.\nhost::DtuMember: Host member.\nseminar::Union{Seminar,Nothing}: Associated seminar or nothing.\n\n\n\n\n\n","category":"type"},{"location":"api/#EMAVisitors._count_pdf_pages-Tuple{String}","page":"API Reference","title":"EMAVisitors._count_pdf_pages","text":"_count_pdf_pages(path_to_pdf::String)\n\nCounts the number of pages in a PDF file using the pdfinfo command-line tool.\n\nArguments\n\npath_to_pdf::String: Path to the PDF file.\n\nReturns\n\nInt: The number of pages in the PDF.\n\nErrors\n\nThrows an error if the file does not exist or if the page count cannot be determined.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors._process_meeting_time-Tuple{Vector{String}}","page":"API Reference","title":"EMAVisitors._process_meeting_time","text":"_process_meeting_time(times::Vector{String})\n\nConverts a vector of time strings to a vector of tuples of Time objects.\n\nArguments\n\ntimes::Vector{String}: Vector of time strings in the format \"start - end\" (e.g., \"9:00 AM - 10:00 AM\").\n\nReturns\n\nVector{Tuple{Time,Time}}: Vector of (start, end) time tuples.\n\nErrors\n\nThrows an error if a time entry does not have both start and end times.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors._process_seminar-Tuple{AbstractVector}","page":"API Reference","title":"EMAVisitors._process_seminar","text":"_process_seminar(ss::AbstractVector)\n\nProcesses a vector of seminar information strings and returns a Seminar object.\n\nArguments\n\nss::AbstractVector: Vector of strings describing seminar fields (e.g., \"Room: 123\", \"Title: Talk\", etc.).\n\nReturns\n\nSeminar: A Seminar object constructed from the parsed information.\n\nErrors\n\nThrows an error if an unknown seminar type is encountered or if time/date formats are invalid.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.affiliation-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.affiliation","text":"affiliation(member::SpeakerName)\n\nReturns the affiliation of the speaker.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.create_schedule-Tuple{}","page":"API Reference","title":"EMAVisitors.create_schedule","text":"create_schedule()\n\nCreates a seminar schedule and speaker information from the talk schedule CSV file. Reads the file specified by the global PATH_TO_TALK_SCHEDULE[], processes the data, and returns the speaker and a vector of day schedules.\n\nReturns\n\nSpeakerName: The speaker with seminar and visit details.\nVector{Union{DaySchedule,Nothing}}: A vector of day schedules for the visit period.\n\nErrors\n\nThrows an error if the visit duration is greater than 3 days, if the talk schedule file does not exist, if a member is not found, or if there are too many members scheduled for a day.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.date-Tuple{EMAVisitors.DaySchedule}","page":"API Reference","title":"EMAVisitors.date","text":"date(schedule::DaySchedule)\n\nReturns the date of the schedule.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.date-Tuple{EMAVisitors.Seminar}","page":"API Reference","title":"EMAVisitors.date","text":"date(s::Seminar)\n\nReturns the date of the seminar.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.email-Tuple{Union{EMAVisitors.DtuMember, EMAVisitors.SpeakerName}}","page":"API Reference","title":"EMAVisitors.email","text":"email(member::Union{DtuMember,SpeakerName})\n\nReturns the email of the member.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.find_dtu_member-Tuple{Vector{EMAVisitors.DtuMember}, AbstractString}","page":"API Reference","title":"EMAVisitors.find_dtu_member","text":"find_dtu_member(members::Vector{DtuMember}, query::AbstractString)\n\nSearches for a DTU member in the provided list by first name, last name, email, or full name.\n\nArguments\n\nmembers::Vector{DtuMember}: List of DTU members to search.\nquery::AbstractString: The search string (can be a name or email).\n\nReturns\n\nThe matching DtuMember if found, otherwise throws an error.\n\nExample\n\nmember = find_dtu_member(members, \"Alice\")\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.generate_latex_schedule-Tuple{}","page":"API Reference","title":"EMAVisitors.generate_latex_schedule","text":"generate_latex_schedule(; CVs::Bool=true)\n\nGenerates the full LaTeX schedule document for the visit, writes it to a .tex file, and compiles it to PDF. Reads and parses member and schedule data, builds all columns, and saves the output in the directory specified by OUTPUT_DIR[].\n\nKeyword Arguments\n\nCVs::Bool=true: (Currently unused) Option for including CVs.\n\nSide Effects\n\nWrites the LaTeX file to disk and runs pdflatex to generate the PDF.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_CVs-Tuple{Vector{Union{Nothing, EMAVisitors.DaySchedule}}, EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.get_CVs","text":"get_CVs(m::Vector{Union{DaySchedule,Nothing}})\n\nGenerates a list of CV PDF file paths for all unique members in the provided day schedules, and merges them into a single PDF using pdftk.\n\nArguments\n\nm::Vector{Union{DaySchedule,Nothing}}: Vector of day schedules.\n\nReturns\n\nTuple{Vector{String}, String}: A tuple containing the list of individual CV PDF paths and the path to the merged PDF file.\n\nErrors\n\nThrows an error if a required PDF file does not exist (currently commented out).\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_all_dtu_members-Tuple{}","page":"API Reference","title":"EMAVisitors.get_all_dtu_members","text":"get_all_dtu_members()\n\nReturns a combined vector of all DTU members from both EMA and other members files.\n\nReturns\n\nVector{DtuMember}: All DTU members from both sources.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_dtu_members-Tuple{}","page":"API Reference","title":"EMAVisitors.get_dtu_members","text":"get_dtu_members(; others=false::Bool)\n\nReads DTU member data from a CSV file and returns a vector of DtuMember objects. Uses the global file path variables defined as Ref.\n\nKeyword Arguments\n\nothers::Bool=false: If false, reads from PATH_TO_EMA_MEMBERS[]; if true, reads from PATH_TO_OTHER_MEMBERS[].\n\nReturns\n\nVector{DtuMember}: A vector of DTU members read from the file.\n\nErrors\n\nThrows an error if the specified file does not exist.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_path_dtu_wind_logo-Tuple{}","page":"API Reference","title":"EMAVisitors.get_path_dtu_wind_logo","text":"get_path_dtu_wind_logo()\n\nGet the path to the DTU wind logo SVG file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_path_output-Tuple{}","page":"API Reference","title":"EMAVisitors.get_path_output","text":"get_path_output()\n\nGet the path to the output directory for generated files.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_path_to_ema_members-Tuple{}","page":"API Reference","title":"EMAVisitors.get_path_to_ema_members","text":"get_path_to_ema_members()\n\nGet the path to the EMA members CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_path_to_excel-Tuple{}","page":"API Reference","title":"EMAVisitors.get_path_to_excel","text":"get_path_to_excel()\n\nGet the path to the main Excel file with talk information.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_path_to_other_members-Tuple{}","page":"API Reference","title":"EMAVisitors.get_path_to_other_members","text":"get_path_to_other_members()\n\nGet the path to the other members CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.get_path_to_talk_schedule-Tuple{}","page":"API Reference","title":"EMAVisitors.get_path_to_talk_schedule","text":"get_path_to_talk_schedule()\n\nGet the path to the talk schedule CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.host-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.host","text":"host(member::SpeakerName)\n\nReturns the host of the speaker.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.hoteladdress-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.hoteladdress","text":"hoteladdress(member::SpeakerName)\n\nReturns the address of the hotel for the speaker.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.hotelmaps-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.hotelmaps","text":"hotelmaps(member::SpeakerName)\n\nReturns the Google Maps link for the hotel of the speaker.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.hotelname-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.hotelname","text":"hotelname(member::SpeakerName)\n\nReturns the name of the hotel for the speaker.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.members-Tuple{EMAVisitors.DaySchedule}","page":"API Reference","title":"EMAVisitors.members","text":"members(schedule::DaySchedule)\n\nReturns the members dictionary of the schedule.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.name-Tuple{EMAVisitors.DaySchedule}","page":"API Reference","title":"EMAVisitors.name","text":"name(schedule::DaySchedule)\n\nReturns a vector of member names in the schedule.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.name-Tuple{Union{EMAVisitors.DtuMember, EMAVisitors.SpeakerName}}","page":"API Reference","title":"EMAVisitors.name","text":"name(member::Union{DtuMember,SpeakerName})\n\nReturns the full name of the member.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.parse_members-Tuple{String}","page":"API Reference","title":"EMAVisitors.parse_members","text":"parse_members(path_to_file::String; others=false)\n\nParses member data from an Excel file and writes it to a CSV file. The sheet and output file depend on the others flag. Uses the global Ref variables PATH_TO_EMA_MEMBERS[] and PATH_TO_OTHER_MEMBERS[] for output paths.\n\nArguments\n\npath_to_file::String: Path to the Excel file containing member data.\n\nKeyword Arguments\n\nothers::Bool=false: If false, reads from the \"ema-members\" sheet and writes to PATH_TO_EMA_MEMBERS[]; if true, reads from the \"other-members\" sheet and writes to PATH_TO_OTHER_MEMBERS[].\n\nReturns\n\nNothing. Prints a success or error message.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.parse_schedule-Tuple{String}","page":"API Reference","title":"EMAVisitors.parse_schedule","text":"parse_schedule(path_to_schedule::String)\n\nParses the talk schedule from an Excel file and writes it to a CSV file. Uses the global OUTPUT_DIR[] for the output directory and saves as \"talk-schedule.csv\".\n\nArguments\n\npath_to_schedule::String: Path to the Excel file containing the talk schedule.\n\nReturns\n\nThe DataFrame containing the talk schedule if successful, otherwise prints an error message.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.position-Tuple{EMAVisitors.DtuMember}","page":"API Reference","title":"EMAVisitors.position","text":"position(member::DtuMember)\n\nReturns the position of the DTU member.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.print_first_column-Tuple{EMAVisitors.SpeakerName, Vector{EMAVisitors.DtuMember}}","page":"API Reference","title":"EMAVisitors.print_first_column","text":"print_first_column(speaker::SpeakerName, dtu_mem::Vector{DtuMember})\n\nGenerates the LaTeX code for the first column of the schedule, including host, contact, and speaker information.\n\nArguments\n\nspeaker::SpeakerName: The speaker for the visit.\ndtu_mem::Vector{DtuMember}: Vector of DTU members for contact info.\n\nReturns\n\nString: The LaTeX code for the first column.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.print_other_columns-Tuple{EMAVisitors.SpeakerName, Vector{Union{Nothing, EMAVisitors.DaySchedule}}, Vector{EMAVisitors.DtuMember}}","page":"API Reference","title":"EMAVisitors.print_other_columns","text":"print_other_columns(speaker::SpeakerName, day_schedules::Vector{Union{DaySchedule,Nothing}}, dtu_mem::Vector{DtuMember})\n\nGenerates the LaTeX code for the remaining columns of the schedule, including daily meeting and seminar information for each day of the visit.\n\nArguments\n\nspeaker::SpeakerName: The speaker for the visit.\nday_schedules::Vector{Union{DaySchedule,Nothing}}: The day schedules for the visit.\ndtu_mem::Vector{DtuMember}: Vector of DTU members for meeting info.\n\nReturns\n\nVector{String}: A vector containing the LaTeX code for each column.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.print_packages-Tuple{}","page":"API Reference","title":"EMAVisitors.print_packages","text":"print_packages()\n\nReturns the LaTeX preamble and document start, including all required packages and header formatting for the EMA schedule document.\n\nReturns\n\nString: The LaTeX code for the document preamble and header.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.room-Tuple{EMAVisitors.Seminar}","page":"API Reference","title":"EMAVisitors.room","text":"room(s::Seminar)\n\nReturns the room of the seminar.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.set_path_dtu_wind_logo-Tuple{String}","page":"API Reference","title":"EMAVisitors.set_path_dtu_wind_logo","text":"set_path_dtu_wind_logo(path::String)\n\nSet the path to the DTU wind logo SVG file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.set_path_output_dir-Tuple{String}","page":"API Reference","title":"EMAVisitors.set_path_output_dir","text":"set_path_output_dir(path::String)\n\nSet the path to the output directory for generated files.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.set_path_to_ema_members-Tuple{String}","page":"API Reference","title":"EMAVisitors.set_path_to_ema_members","text":"set_path_to_ema_members(path::String)\n\nSet the path to the EMA members CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.set_path_to_excel-Tuple{String}","page":"API Reference","title":"EMAVisitors.set_path_to_excel","text":"set_path_to_excel(path::String)\n\nSet the path to the main Excel file with talk information.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.set_path_to_other_members-Tuple{String}","page":"API Reference","title":"EMAVisitors.set_path_to_other_members","text":"set_path_to_other_members(path::String)\n\nSet the path to the other members CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.set_path_to_talk_schedule-Tuple{String}","page":"API Reference","title":"EMAVisitors.set_path_to_talk_schedule","text":"set_path_to_talk_schedule(path::String)\n\nSet the path to the talk schedule CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.startdate-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.startdate","text":"startdate(member::SpeakerName)\n\nReturns the start date of the speaker's visit.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.talkdate-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.talkdate","text":"talkdate(member::SpeakerName)\n\nReturns the seminar date or \"Not scheduled\" if no seminar is assigned.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.talkroom-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.talkroom","text":"talkroom(member::SpeakerName)\n\nReturns the seminar room or \"Not scheduled\" if no seminar is assigned.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.talktime-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.talktime","text":"talktime(member::SpeakerName)\n\nReturns the seminar time or \"Not scheduled\" if no seminar is assigned.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.talktitle-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.talktitle","text":"talktitle(member::SpeakerName)\n\nReturns the seminar title or \"Not scheduled\" if no seminar is assigned.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.time-Tuple{EMAVisitors.Seminar}","page":"API Reference","title":"EMAVisitors.time","text":"time(s::Seminar)\n\nReturns the time tuple of the seminar.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.title-Tuple{EMAVisitors.Seminar}","page":"API Reference","title":"EMAVisitors.title","text":"title(s::Seminar)\n\nReturns the title of the seminar.\n\n\n\n\n\n","category":"method"},{"location":"api/#EMAVisitors.visitduration-Tuple{EMAVisitors.SpeakerName}","page":"API Reference","title":"EMAVisitors.visitduration","text":"visitduration(member::SpeakerName)\n\nReturns the visit duration in days.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/#This-is-a-Tutorial-example","page":"Tutorials","title":"This is a Tutorial example","text":"","category":"section"},{"location":"tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/#Generating-a-Schedule","page":"Tutorials","title":"Generating a Schedule","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"This tutorial shows how to generate a seminar schedule and LaTeX document using EMAVisitors.jl.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using EMAVisitors\n\n# Set up configuration (optional)\nEMAVisitors.set_path_to_excel(\"/path/to/talk-info.xlsx\")\nEMAVisitors.set_path_output_dir(\"/path/to/output\")\n\n# Generate the LaTeX schedule and merge CVs\nEMAVisitors.generate_latex_schedule()","category":"page"},{"location":"tutorials/#Customizing-Output-Directory","page":"Tutorials","title":"Customizing Output Directory","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"You can change where files are saved by setting a custom output directory:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"EMAVisitors.set_path_output_dir(\"/your/custom/path\")","category":"page"},{"location":"tutorials/#Adding-Member-Data","page":"Tutorials","title":"Adding Member Data","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Prepare your member data in the Excel file specified by set_path_to_excel. Make sure the file is formatted as expected by the package.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"More tutorials coming soon!","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This is a contribution page","category":"page"},{"location":"#EMAVisitors.jl","page":"Home","title":"EMAVisitors.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EMAVisitors.jl is a Julia package for managing seminar schedules, members, and generating LaTeX documents for the Energy and Markets Analytic (EMA) group at DTU.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/licioromao/EMAVisitors.jl.git\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using EMAVisitors\n\n# Set up configuration (optional)\nEMAVisitors.set_path_to_excel(\"/path/to/talk-info.xlsx\")\nEMAVisitors.set_path_output_dir(\"/path/to/output\")\n\n# Generate the LaTeX schedule and merge CVs\nEMAVisitors.generate_latex_schedule()","category":"page"},{"location":"#Configuration","page":"Home","title":"Configuration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Configuration section below for details on setting file paths and other options.","category":"page"},{"location":"#Further-Reading","page":"Home","title":"Further Reading","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tutorials\nAPI Reference\nContributing","category":"page"}]
}
